router_id = "1.1.1.1"       # Default Router ID for the service
default_as = 65000
poll_interval = 5
bgp_socket = "0.0.0.0:1179" # Listen on all interfaces (IPv4)
api_socket = "[::]:8080"    # Listen on all interfaces (IPv6)


[[peers]]
remote_ip = "127.0.0.0/30"  # Can be a network or single peer (without CIDR mask)
                            # Networks larger than 1 host will be implicitly passive
                            # and will accept any inbound peering sourced from the subnet
dest_port = 1179
remote_as = 65000
local_as = 65000
router_id = "127.0.0.1"     # Can override local Router ID for this peer
hold_timer = 30
enabled = true
families = [
    "ipv4 unicast",
    "ipv6 unicast",
    "ipv4 flow",
    "ipv6 flow",
]
passive = true              # If passive, bgpd won't attempt outbound connections
[[peers.static_routes]]     # Static routes can be added
prefix = "9.9.9.0/24"
next_hop = "192.168.88.1"
as_path = ["65000", "500"]
communities = ["101", "202", "65000:99"]
[[peers.static_flows]]      # And Static Flowspec rules
afi = 1
action = "redirect 6:302"
matches= ["source 192.168.0.0/16", "destination-port 443"]
as_path = ["65000", "500"]
communities = ["101", "202", "65000:99"]

[[peers]]
remote_ip = "::2"
dest_port = 1179
remote_as = 65000
local_as = 65000
families = [
    "ipv6 unicast",
    "ipv6 flow",
]
passive = true
advertise_sources = [       # Default is API & Config, you can add peer advertisements
    "api", "peer", "config",
]
[[peers.static_flows]]
afi = 2
action = "traffic-rate 24000"
matches= [
    "source 3001:100::/56",
    "destination-port >8000 <=8080",
    "packet-length >100",
]
as_path = ["65000", "500"]
communities = ["101", "202", "65000:99"]